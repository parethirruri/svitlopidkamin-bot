# main.py ‚Äî @svitlopidkamin_bot (–±–µ–∑ /setchat, –∞–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)
import logging, re, pytz, requests
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# ==================== –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ====================
BOT_TOKEN = "8289591969:AAH0QDO7dJhq0lwfn9HcarxloO8_GY9RQcU"
LOCATION = '–ü—ñ–¥–∫–∞–º—ñ–Ω—å (–ü—ñ–¥–∫–∞–º—ñ–Ω—Å—å–∫–∞ –û–¢–ì)'
GPV_QUEUE = '1.2'
GAV_QUEUE = '1'
SGAV_QUEUE = '1'
TZ = pytz.timezone('Europe/Kiev')

# –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —á–∞—Ç–∏, –¥–µ –±–æ—Ç —î –∞–¥–º—ñ–Ω–æ–º
ACTIVE_CHATS = set()
# =====================================================

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')

def get_outage_schedule():
    try:
        headers = {'User-Agent': 'Mozilla/5.0'}
        r = requests.get('https://poweron.loe.lviv.ua/', headers=headers, timeout=20)
        r.raise_for_status()
        text = BeautifulSoup(r.text, 'html.parser').get_text()

        gpv = re.findall(rf'–ì—Ä—É–ø–∞\s*{re.escape(GPV_QUEUE)}\s*.*?–Ω–µ–º–∞—î.*?(\d{{2}}:\d{{2}})\s*–¥–æ\s*(\d{{2}}:\d{{2}})', text, re.I)
        gav = bool(re.search(rf'–ì–ê–í.*?{GAV_QUEUE}', text, re.I))
        sgav = bool(re.search(rf'–°–ì–ê–í.*?{SGAV_QUEUE}', text, re.I))

        outages = [f"–∑ {s} –¥–æ {e}" for s, e in gpv]
        if gav: outages.append("–ê–≤–∞—Ä—ñ–π–Ω–µ (–ì–ê–í)")
        if sgav: outages.append("–°–ø–µ—Ü—ñ–∞–ª—å–Ω–µ (–°–ì–ê–í)")
        return outages or None
    except Exception as e:
        logging.error(f"–ü–∞—Ä—Å–∏–Ω–≥: {e}")
        return "ERROR"

def get_status_text():
    res = get_outage_schedule()
    if res == "ERROR":
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ (—Å–∞–π—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π –∞–±–æ –ø–æ–º–∏–ª–∫–∞)."
    if res is None:
        return "–ü—Ä–æ—Ç—è–≥–æ–º —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—å–æ–≥–æ –¥–Ω—è –≤—ñ–¥–∫–ª—é—á–µ–Ω—å —Å–≤—ñ—Ç–ª–∞ –Ω–µ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è."
    return "–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: " + "; ".join(res)

# === –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è ===
async def check_and_notify(context: ContextTypes.DEFAULT_TYPE):
    res = get_outage_schedule()
    if not res or res == "ERROR" or not ACTIVE_CHATS:
        return

    now = datetime.now(TZ)
    soon = now + timedelta(hours=1)

    for interval in res:
        if "–∑" not in interval: continue
        start_str = interval.split(" –¥–æ ")[0].replace("–∑ ", "")
        try:
            start = datetime.strptime(start_str, '%H:%M').replace(year=now.year, month=now.month, day=now.day)
            if now < start <= soon:
                msg = f"–ß–µ—Ä–µ–∑ 1 –≥–æ–¥–∏–Ω—É –Ω–µ –±—É–¥–µ —Å–≤—ñ—Ç–ª–∞!\n\n{interval}"
                for chat_id in list(ACTIVE_CHATS):
                    try:
                        await context.bot.send_message(chat_id=chat_id, text=msg)
                    except:
                        ACTIVE_CHATS.discard(chat_id)  # –í–∏–¥–∞–ª—è—î–º–æ, —è–∫—â–æ –±–æ—Ç –±—ñ–ª—å—à–µ –Ω–µ –∞–¥–º—ñ–Ω
        except: pass

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤ ===
async def check_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat = update.effective_chat
    if chat.type in ['group', 'supergroup']:
        try:
            member = await chat.get_member(context.bot.id)
            if member.status in ['administrator', 'creator']:
                ACTIVE_CHATS.add(chat.id)
            else:
                ACTIVE_CHATS.discard(chat.id)
        except: pass

# ==================== –ö–û–ú–ê–ù–î–ò ====================
async def start(update: Update, context):
    await check_admin(update, context)
    text = (
        "üëã –°–ª–∞–≤–∞ –Ü—Å—É—Å—É –•—Ä–∏—Å—Ç—É! –Ø ‚Äî *svitlo–Ñ*\n\n"
        "üìç –ü—ñ–¥–∫–∞–º—ñ–Ω—å (–ü—ñ–¥–∫–∞–º—ñ–Ω—Å—å–∫–∞ –û–¢–ì)\n"
        "üîå –ì–ü–í 1.2 | –ì–ê–í 1 | –°–ì–ê–í 1\n\n"
        "üí° –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤—ñ—Ç–ª–æ ‚Äî `/svitlo`\n"
    )
    await update.message.reply_text(text, parse_mode='Markdown')

async def svitlo(update: Update, context):
    await check_admin(update, context)
    await update.message.reply_text(get_status_text())
# ===============================================

def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("svitlo", svitlo))

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–¥–º—ñ–Ω-–ø—Ä–∞–≤ –ø—Ä–∏ –±—É–¥—å-—è–∫–æ–º—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ
    app.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, check_admin))

    # –ê–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
    app.job_queue.run_repeating(check_and_notify, interval=3600, first=30)

    logging.info("–ë–û–¢ –ó–ê–ü–£–©–ï–ù–û (–∞–≤—Ç–æ-—Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è)")
    app.run_polling()

if __name__ == '__main__':
    main()
